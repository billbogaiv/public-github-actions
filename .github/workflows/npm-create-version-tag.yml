name: Create Version Tag (NPM)

# Executes 'npm version' in a way that creates a git commit and also tags that commit.
# The only file that should change during this step is the 'package.json' file.
# The commit and tag are then pushed to the main git repo for future use by other PRs.
#
# There is support for package.json files that are named otherwise or do not exist at 
# the root of the repository.
# 
# Requires the use of a GitHub App token in order to perform the push.  This is because 
# we need to bypass any branch protection and/or rulesets on the branch.

permissions:
  contents: read

on:

  workflow_call:

    inputs:

      head_commit_message:
        description: The head commit message reported by the workflow_run event.
        type: string
        required: false
        default: Release

      npm_scope:
        description: The NPM 'scope' value to use.  Default is 'ritterim' as it needs to match the GitHub organization value.
        type: string
        required: false
        default: ritterim

      npm_package_name:
        description: The package name such as 'content-search-component' or 'submissions-form'.
        required: true
        type: string

      package_json_filename:
        description: Name of the 'package.json' file if not the default name.
        required: false
        type: string
        default: package.json

      project_directory:
        description: Location of the package.json file for the NPM package.
        required: false
        type: string
        default: ./

      version:
        required: true
        type: string

    secrets:

      gh_actions_secret_passing_passphrase:
        description: The random password (usually secrets.ACTIONS_SECRET_PASSING_PASSPHRASE) used to encrypt values to be passed between job steps.
        required: true

      gh_encrypted_token:
        description: The GitHub token generated by the GitHub Application.  This is an encrypted value that must be decrypted before use.
        required: true

jobs:

  release:
    name: Create Version Tag (NPM)
    runs-on: ubuntu-latest
    defaults:
      run:
          working-directory: ${{ inputs.project_directory }}

    env:
      ACTIONS_SECRET_PASSING_PASSPHRASE: ${{ secrets.gh_actions_secret_passing_passphrase }}
      DECRYPTED_GITHUB_TOKEN: not-yet-set
      GITHUBREPOSITORY: ${{ github.repository }}
      HEADCOMMITMESSAGE: ${{ inputs.head_commit_message }}
      HEADCOMMITTITLE: Release
      NPMVERSIONOUTPUT: 'v0.0.0'
      NPMPACKAGENAME: ${{ inputs.npm_package_name }}
      NPMVERSION: ${{ inputs.version }}
      NPMSCOPE: ${{ inputs.npm_scope }}
      PACKAGEJSONFILENAME: ${{ inputs.package_json_filename }}
      PROJECTDIRECTORY: ${{ inputs.project_directory }}
      PKGJSONVER: '0.0.0'

    steps:

      - name: Validate inputs.npm_scope
        uses: ritterim/public-github-actions/actions/npm-package-scope-validator@v1.17
        with:
          npm_scope: ${{ env.NPMSCOPE }}

      - name: Validate inputs.npm_package_name
        uses: ritterim/public-github-actions/actions/npm-package-name-validator@v1.17
        with:
          package_name: ${{ env.NPMPACKAGENAME }}

      - name: Validate inputs.package_json_filename
        uses: ritterim/public-github-actions/actions/file-name-validator@v1.17
        with:
          file_name: ${{ env.PACKAGEJSONFILENAME }}

      - name: Validate inputs.project_directory
        uses: ritterim/public-github-actions/actions/path-name-validator@v1.17
        with:
          path_name: ${{ env.PROJECTDIRECTORY }}

      - name: Validate inputs.version
        uses: ritterim/public-github-actions/actions/version-number-validator@v1.17
        with:
          version: ${{ env.NPMVERSION }}

      - name: Fetch first line of HEADCOMMITMESSAGE
        run: |
          HEADCOMMITTITLE=$(echo "${HEADCOMMITMESSAGE:0:50}" | head -n 1)
          echo "HEADCOMMITTITLE=${HEADCOMMITTITLE}"
          echo "HEADCOMMITTITLE=${HEADCOMMITTITLE}" >> $GITHUB_ENV

      - name: Checkout Project
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - run: git status

      - name: git debug information
        run: |
          echo "github.base_ref=${{ github.base_ref }}"
          echo "github.head_ref=${{ github.head_ref }}"
          echo "github.ref=${{ github.ref }}"

      - name: Decrypt the Generated GITHUB_TOKEN
        run: |
          DECRYPTED_GITHUB_TOKEN=$(echo -n '${{ secrets.gh_encrypted_token }}' | base64 -d | openssl enc -d -aes-256-cbc -pbkdf2 -pass env:ACTIONS_SECRET_PASSING_PASSPHRASE)
          echo "DECRYPTED_GITHUB_TOKEN=$DECRYPTED_GITHUB_TOKEN"
          echo "DECRYPTED_GITHUB_TOKEN=$DECRYPTED_GITHUB_TOKEN" >> $GITHUB_ENV

      - run: git config --list --show-origin

      - name: Setup git credentials
        run: |
          MY_GIT_TOKEN=${{ env.DECRYPTED_GITHUB_TOKEN }}
          git config --global url."https://api:$MY_GIT_TOKEN@github.com/".insteadOf "https://github.com/"
          git config --global url."https://ssh:$MY_GIT_TOKEN@github.com/".insteadOf "ssh://git@github.com/"
          git config --global url."https://git:$MY_GIT_TOKEN@github.com/".insteadOf "git@github.com:"
          git config --local --unset http.https://github.com/.extraheader

      - run: git config --list --show-origin

      - run: git remote --verbose

      - name: git remote add upstream
        run: git remote add upstream "https://github.com/${GITHUBREPOSITORY}"

      - run: git config --list --show-origin

      - run: git remote --verbose

      - name: git fetch upstream
        run: git fetch upstream

      - name: Configure git
        run: |
          git config --global user.email "rimdev@rimdev.io"
          git config --global user.name "GitHub Actions Runner"

      - name: Verify package name in ${{ inputs.package_json_filename }}
        run: |
          NPMJSONPACKAGENAME=$(jq -r '.name' "${PACKAGEJSONFILENAME}")
          echo "NPMJSONPACKAGENAME=${NPMJSONPACKAGENAME}"
          echo "${NPMJSONPACKAGENAME}" | grep "@${NPMSCOPE}/${NPMPACKAGENAME}"

      - name: Check version in ${{ inputs.package_json_filename }}
        run: jq -r '.version' "${PACKAGEJSONFILENAME}"

      - name: npm version config
        run: |
          npm config set allow-same-version=false
          npm config set git-tag-version=true
          npm config set sign-git-tag=false

      # Note the use of '--ignore-scripts' here to prevent 'npm version' from running any scripts in the package.json
      - name: npm version "${{ inputs.version }}"
        run: |
          NPMVERSIONOUTPUT=$(npm version --ignore-scripts "${NPMVERSION}" -m "%s: ${HEADCOMMITTITLE}")
          echo NPMVERSIONOUTPUT=$NPMVERSIONOUTPUT
          echo NPMVERSIONOUTPUT=$NPMVERSIONOUTPUT >> $GITHUB_ENV

      - name: Check version in ${{ inputs.package_json_filename }}
        run: |
          PKGJSONVER="$(jq -r '.version' "${PACKAGEJSONFILENAME}")"
          echo "PKGJSONVER=$PKGJSONVER"
          echo "PKGJSONVER=$PKGJSONVER" >> $GITHUB_ENV

      - run: ls -la "${PROJECTDIRECTORY}"

      - run: git status

      - run: git log -1

      - run: git diff HEAD^ HEAD

      - run: git push upstream ${{ github.ref }}

      - run: git push upstream "${NPMVERSIONOUTPUT}"
