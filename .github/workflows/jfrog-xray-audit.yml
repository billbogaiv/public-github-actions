name: JFrog XRay Audit

# Use JFrog XRay to 'audit' the source files in the solution.
# This reusable workflow assumes that the workspace was persisted into an artifact.

# The "jfrog/setup-jfrog-cli" action requires "id-token: write" or else you will get
# an error about: "Unable to get ACTIONS_ID_TOKEN_REQUEST_URL env variable".

permissions:
  contents: read
  id-token: write

on:

  workflow_call:

    inputs:

      jfrog_api_base_url:
        description: 'JFrog platform url (for example: https://rimdev.jfrog.io)'
        required: true
        type: string

      jfrog_oidc_provider_name:
        description: The OIDC Integration Provider Name to use for authentication from the GitHub Action to the JFrog instance.
        required: true
        type: string

      jfrog_xray_watch_list:
        description: Comma-delimited list (with no spaces) of XRay watches to enforce.  Passed to "jf audit" via the "--watches" argument.
        required: true
        type: string

      persisted_workspace_artifact_name:
        description: Name of the artifact which contains the persisted workspace directory.
        required: false
        type: string
        default:

      project_directory:
        description: Location of the solution file for the dotnet solution.  Defaults to the root directory.
        required: false
        type: string
        default: ./

      report_artifact_name:
        description: The GitHub artifact name for the report file.
        required: true
        type: string

      report_artifact_retention_days:
        required: false
        type: number
        default: 90

    outputs:
      report_artifact_name:
        value: ${{ jobs.xray-scan.outputs.report_artifact_name }}

jobs:

  xray-audit:
    name: JFrog XRay Audit
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ inputs.project_directory }}

    outputs:
      report_artifact_name: ${{ env.REPORTARTIFACTNAME }}

    env:
      CI: true
      NUGETHASHFILES: "${{ inputs.project_directory }}**/*.csproj"
      PROJECTDIRECTORY: ${{ inputs.project_directory }}
      REPORTARTIFACTNAME: ${{ inputs.report_artifact_name }}
      JFROG_API_BASE_URL: ${{ inputs.jfrog_api_base_url }}
      JFROG_OIDC_PROVIDER_NAME: ${{ inputs.jfrog_oidc_provider_name }}
      JFROG_XRAY_WATCH_LIST: ${{ inputs.jfrog_xray_watch_list }}

    steps:

      - name: Validate inputs.jfrog_oidc_provider_name
        uses: ritterim/public-github-actions/actions/regex-validator@v1.16.2
        with: # This regex pattern is a bit of a guess
          regex_pattern: '^[A-Za-z0-9\-]{5,55}$'
          value: ${{ env.JFROG_OIDC_PROVIDER_NAME }}

#TODO: Validate inputs.jfrog_xray_watch_list

      - name: Validate inputs.project_directory
        uses: ritterim/public-github-actions/actions/path-name-validator@v1.16.2
        with:
          path_name: ${{ env.PROJECTDIRECTORY }}

      - name: Validate inputs.report_artifact_name
        uses: ritterim/public-github-actions/actions/file-name-validator@v1.16.2
        with:
          file_name: ${{ env.REPORTARTIFACTNAME }}

      - name: Restore Workspace
        uses: ritterim/public-github-actions/forks/persist-workspace@v1.16.0
        with:
          action: retrieve
          artifact_name: ${{ inputs.persisted_workspace_artifact_name }}

      - name: Setup ~/.nuget/packages cache
        uses: actions/cache@v4
        with:
          key: nuget-packages-${{ runner.os }}-${{ hashFiles(env.NUGETHASHFILES) }}
          path: |
            ~/.nuget/packages

      - name: Install JFrog CLI
        uses: jfrog/setup-jfrog-cli@v4
        env:
          JF_URL: ${{ env.JFROG_API_BASE_URL }}
        with:
          oidc-provider-name: ${{ env.JFROG_OIDC_PROVIDER_NAME }}

      - name: jf config show
        run: jf config show

      - name: jf audit
        id: audit
        run: |
          set -o pipefail
          touch "${REPORTARTIFACTNAME}.txt"
          jf audit --watches="${JFROG_XRAY_WATCH_LIST}" | tee "${REPORTARTIFACTNAME}.txt"
        continue-on-error: true

      - name: Report File
        run: cat "${REPORTARTIFACTNAME}.txt"

      - name: Upload Artifacts
        if: steps.audit.outcome == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.REPORTARTIFACTNAME }}
          path: ${{ env.REPORTARTIFACTNAME }}.*
          retention-days: ${{ inputs.report_artifact_retention_days }}
          if-no-files-found: error

      # TODO: Post the report text back to the pull request?

      # Spit out the report file again, because this is the step that will go angry-red
      # when the audit is not successful.  By repeating it here, the dev doesn't have
      # to scroll up to a prior step when there is an issue.
      - name: Fail build on audit error
        if: steps.audit.outcome == 'failure'
        run: |
          echo "REPORT FILE: ${REPORTARTIFACTNAME}.txt"
          cat "${REPORTARTIFACTNAME}.txt"
          exit 1
