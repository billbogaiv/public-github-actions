name: Pack (NPM)

# Execute `npm pack` against the package.json file. There is support for 
# package.json files that are named otherwise or do not exist at the root 
# of the repository.  This workflow *only* runs the pack command.

# The resulting artifact (a `.tgz` file) will be uploaded to the workflow 
# run and output variables provide information on the archive name 
# (`artifact_name`) and file path (`artifact_file_path`).

permissions:
  contents: read
  packages: read

on:

  workflow_call:

    inputs:

      artifact_retention_days:
        required: false
        type: number
        default: 90

      npm_scope:
        description: The NPM 'scope' value to use.  Default is 'ritterim' as it needs to match the GitHub organization value.
        type: string
        required: false
        default: ritterim

      npm_package_name:
        description: The package name such as 'content-search-component' or 'submissions-form'.
        required: true
        type: string

      persisted_workspace_artifact_name:
        description: Name of the artifact which contains the persisted workspace directory.
        required: false
        type: string
        default:

      project_directory:
        description: Location of the package.json file for the NPM package.
        required: false
        type: string
        default: ./

      package_json_filename:
        description: Name of the 'package.json' file if not the default name.
        required: false
        type: string
        default: package.json

      version:
        required: true
        type: string

    outputs:

      artifact_name:
        value: ${{ jobs.pack.outputs.artifact_name }}

      artifact_file_path:
        value: ${{ jobs.pack.outputs.artifact_file_path }}

jobs:

  pack:
    name: Pack (NPM)
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ inputs.project_directory }}

    outputs:
      artifact_name: ${{ steps.set-outputs.outputs.artifact_name }}
      artifact_file_path: ${{ steps.set-outputs.outputs.artifact_file_path }}

    env:
      NPMPACKAGENAME: ${{ inputs.npm_package_name }}
      NPMSCOPE: ${{ inputs.npm_scope }}
      NPMVERSION: ${{ inputs.version }}
      PACKAGEJSONFILENAME: ${{ inputs.package_json_filename }}
      PKGJSONVER: 0.0.0
      PROJECTDIRECTORY: ${{ inputs.project_directory }}

    steps:

      - name: Validate inputs.npm_scope
        uses: ritterim/public-github-actions/actions/npm-package-scope-validator@v1.17
        with:
          npm_scope: ${{ env.NPMSCOPE }}

      - name: Validate inputs.npm_package_name
        uses: ritterim/public-github-actions/actions/npm-package-name-validator@v1.17
        with:
          package_name: ${{ env.NPMPACKAGENAME }}

      - name: Validate inputs.package_json_filename
        uses: ritterim/public-github-actions/actions/file-name-validator@v1.17
        with:
          file_name: ${{ env.PACKAGEJSONFILENAME }}

      - name: Validate inputs.project_directory
        uses: ritterim/public-github-actions/actions/path-name-validator@v1.17
        with:
          path_name: ${{ env.PROJECTDIRECTORY }}

      - name: Validate inputs.version
        uses: ritterim/public-github-actions/actions/version-number-validator@v1.17
        with:
          version: ${{ env.NPMVERSION }}

      - name: Restore Workspace
        uses: ritterim/public-github-actions/forks/persist-workspace@v1.16.0
        with:
          action: retrieve
          artifact_name: ${{ inputs.persisted_workspace_artifact_name }}

      - name: Verify package name in ${{ inputs.package_json_filename }}
        run: |
          NPMJSONPACKAGENAME=$(jq -r '.name' "${PACKAGEJSONFILENAME}")
          echo "NPMJSONPACKAGENAME=${NPMJSONPACKAGENAME}"
          echo "${NPMJSONPACKAGENAME}" | grep "@${NPMSCOPE}/${NPMPACKAGENAME}"

      - name: Check version in ${{ inputs.package_json_filename }}
        run: jq -r '.version' "${PACKAGEJSONFILENAME}"

      - name: npm version config
        run: |
          npm config set allow-same-version=true
          npm config set git-tag-version=false
          npm config set sign-git-tag=false

      # Note the use of '--ignore-scripts' here to prevent 'npm version' from running any scripts in the package.json
      - run: npm version --ignore-scripts "${NPMVERSION}"

      - name: Check version in ${{ inputs.package_json_filename }}
        run: |
          PKGJSONVER="$(jq -r '.version' "${PACKAGEJSONFILENAME}")"
          echo "PKGJSONVER=$PKGJSONVER"
          echo "PKGJSONVER=$PKGJSONVER" >> $GITHUB_ENV

      - run: ls -la

      - name: npm pack
        run: npm pack

      - run: ls -la

      - name: Set Outputs
        id: set-outputs
        run: |
          ARTIFACTNAME="${NPMSCOPE}-${NPMPACKAGENAME}-${PKGJSONVER}"
          echo "artifact_name=${ARTIFACTNAME}"
          echo "artifact_name=${ARTIFACTNAME}" >> $GITHUB_OUTPUT
          ARTIFACTFILEPATH="${NPMSCOPE}-${NPMPACKAGENAME}-${PKGJSONVER}.tgz"
          echo "artifact_file_path=${ARTIFACTFILEPATH}"
          echo "artifact_file_path=${ARTIFACTFILEPATH}" >> $GITHUB_OUTPUT

      - name: Upload Artifact
        id: upload-artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.set-outputs.outputs.artifact_name }}
          path: ${{ steps.set-outputs.outputs.artifact_file_path }}
          retention-days: ${{ inputs.artifact_retention_days }}
          if-no-files-found: error
